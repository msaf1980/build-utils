#!/bin/bash

unset URL
unset BRANCH
unset COMMIT
unset NAME
unset DIRURL

RPMBUILDDIR=${HOME}/rpmbuild
SOURCEDIR=${RPMBUILDDIR}/SOURCES
BUILDIR=${RPMBUILDDIR}/SOURCES

DIR=$( pwd )

git_clone() {
    git clone -b "${BRANCH}" --single-branch "${URL}" -o "${NAME}" || return 1
    cd "${NAME}" || return 1
    return 0
}

git_pull_branch() {
    git checkout "${BRANCH}" || return 1
    git pull --force || return 1
    return 0
}

git_version() {
    unset VERSION
    unset RELEASE
    GIT_VERSION="$(git describe --always --tags | sed -e 's/^[a-z]*[-_]//g')" && {
        set -f; IFS='-' ; set -- ${GIT_VERSION}
        VERSION=$1; [ -z "$3" ] && RELEASE=$2 || RELEASE=$2.$3
        set +f; unset IFS

        [ "$RELEASE" == "" -a "$VERSION" != "" ] && {
	    RELEASE=0.g${COMMIT:0:7}
	}

        if echo $VERSION | egrep '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' >/dev/null; then
            VERSION=${VERSION:1:${#VERSION}}
        elif ! echo $VERSION | egrep '^[0-9]+\.[0-9]+(\.[0-9]+)?$' >/dev/null; then
            echo "failed to extract version from ${GIT_VERSION}" >&2
            echo "check VERSION: ${VERSION}, RELEASE: ${RELEASE}" >&2
            return 1
        fi
        return 0
    }
    return 1
}

git_last_commit() {
    COMMIT=$( git log -n 1 --pretty=format:'%H' )
    [ "$?" == "0" ] && return 0 || return 1
}

git_commit() {
    if [ -z "${COMMIT}" ]; then
        git_last_commit || return 1
    else
        echo "reset to commit ${COMMIT}"
        git reset --hard ${COMMIT} || return 1
        NEEDCOMMIT="${COMMIT}"
        git_last_commit || return 1
        if [ "${NEEDCOMMIT}" != "${COMMIT}" ]; then
    	    echo "unable to reset to ${NEEDCOMMIT}, current commit is ${COMMIT}" >&2
    	    return 1
        fi
    fi
    return 0
}

usage() {
  echo "use: $0 [-u GIT_URL | -d DIR] [-n NAME]  [-b BRANCH] [-c COMMIT] [-s SPEC_FILE]" >&2
  echo "  by default spec file location in SOURCE with repo name" >&2
  exit 1
}

while getopts "n:u:d:b:c:s:h" opt ; do
    case $opt in
	n)
	    NAME="$OPTARG"
	    ;;
	u)
	    URL="$OPTARG"
	    ;;
	d)
	    DIRURL="$OPTARG"
	    ;;
	b)
	    BRANCH="$OPTARG"
	    ;;
	c)
	    COMMIT="$OPTARG"
	    ;;
	s)
	    SPECFILE="$OPTARG"
	    ;;
	h)
	    usage
	    ;;
esac
done

[ -z "${URL}" -a -z "${DIRURL}" ] && usage
[ -n "${URL}" -a -n "${DIRURL}" ] && {
    echo "use dir or repo url" >&2
    exit 1
}

[ -n "${URL}" ] && {
   [ -z "${BRANCH}" ] && BRANCH="master" || usage
}

[ -n "${NAME}" ] || {
    [ -n "${URL}" ] && {
        NAME=$( basename ${URL} | sed -e 's/\.git$//' )
    } || {
	NAME=$( basename ${DIRURL} | sed -e 's/\.git$//' )
    }
}

[ -n "${NAME}" ] || {
    echo "can't extract name from url ${URL}" >&2
    exit 1
}

[ -z "${SPECFILE}" ] && SPECFILE="${DIR}/${NAME}.spec"

#cp -f "${SPECFILE}" "${SOURCEDIR}/" || exit 1
#SPECFILE=$( basename ${SPECFILE} )

if [ -n "${URL}" ]; then
    if [ -d "${NAME}" ]; then
	rm -rf "${NAME}" || exit 1
    fi
    git_clone || exit 1
    git_commit || exit 1
else
    [ "${COMMIT}" != "" -o "${BRANCH}" != "" ] && {
       echo "can't use commit or branch with dir mode" >&2
       exit 1 
    } 
    cd ${DIRURL} || exit 1
    git_last_commit || exit 1
    #git_pull_branch || exit 1
fi

git_version || exit 1

printf "Version %s  Release %s Commit %s\n" "$VERSION" "$RELEASE" "$COMMIT"
cd .. || exit 1
[ -d "${NAME}-${VERSION}.${RELEASE}" ] && {
    rm -rf "${NAME}-${VERSION}.${RELEASE}" || exit 1
}

#mv "${NAME}" "${NAME}-${VERSION}.${RELEASE}" || exit 1

echo "create ${SOURCEDIR}/${NAME}-${VERSION}.${RELEASE}.tbz"
tar -cjf "${SOURCEDIR}/${NAME}-${VERSION}.${RELEASE}.tbz" --exclude .git "${NAME}" || exit 1
[ -d SOURCES ] && {
    cp -f SOURCES/* "${SOURCEDIR}/"  || exit 1
}



cd "${SOURCEDIR}" && {
    rpmbuild -ba "${SPECFILE}" --define "vers ${VERSION}" --define "rel ${RELEASE}" --define "commit ${COMMIT}" || {
    echo "Build failed !! Fix and run" >&2
    echo rpmbuild -ba \"${SPECFILE}\" --define \"vers ${VERSION}\" --define \"rel ${RELEASE}\" --define \"commit ${COMMIT}\" >&2
    exit 1
  }
} || {
    exit 1
}

exit 0
